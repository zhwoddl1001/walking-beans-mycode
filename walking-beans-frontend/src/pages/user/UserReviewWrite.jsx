import React, {useEffect, useState} from "react";
import axios from "axios";
import "../../css/User.css";
import "../../css/Order.css";
import groupIcon from "../../assert/svg/Group.svg"
import {useLocation, useNavigate, useParams} from "react-router-dom";
import XIcon from "../../assert/images/user/XIcon.svg"

const UserReviewWrite = () => {
    const [reviews, setReviews] = useState([]);
    const [riderReview, setRiderReview] = useState([]);
    const [selectedImages, setSelectedImages] = useState([]);
    const location = useLocation();
    const {orderId} = useParams();
    const [userId, setUserId] = useState(null);
    const [storeId, setStoreId] = useState(location.state?.storeId || null);
    const [riderId, setRiderId] = useState(location.state?.riderId || null);
    const navigate = useNavigate();
    const [isLoading, setIsLoading] = useState(false);
    const [storeName, setStoreName] = useState('');


    /*  const [newReview, setNewReview] = useState({
          orderId: orderId,
          userId: null,
          storeId: storeId,
          reviewStarRating: 5, // Í∏∞Î≥∏Í∞í 5Ï†ê
          reviewContent: "",
      }); Ïó∞Í≤∞ÎêòÎ©¥ storeId,orderId ÏûëÏÑ±*/
    const [newReview, setNewReview] = useState({
        orderId: orderId, // üõ† ÌÖåÏä§Ìä∏Ïö© Ï£ºÎ¨∏ ID (Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî order_idÎ°ú ÏÑ§Ï†ï)
        userId: userId, // üõ† ÌÖåÏä§Ìä∏Ïö© Ïú†Ï†Ä ID
        storeId: storeId, // üõ† ÌÖåÏä§Ìä∏Ïö© Îß§Ïû• ID (Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî store_idÎ°ú ÏÑ§Ï†ï)
        /*  orderId: 5, // üõ† ÌÖåÏä§Ìä∏Ïö© Ï£ºÎ¨∏ ID (Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî order_idÎ°ú ÏÑ§Ï†ï)
          userId: 1, // üõ† ÌÖåÏä§Ìä∏Ïö© Ïú†Ï†Ä ID
          storeId: 2, // üõ† ÌÖåÏä§Ìä∏Ïö© Îß§Ïû• ID (Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî store_idÎ°ú ÏÑ§Ï†ï)*/
        reviewStarRating: 5, // Í∏∞Î≥∏Í∞í 5Ï†ê
        reviewContent: "",
    });
    const [newRiderReview, setNewRiderReview] = useState({
        orderId: orderId,
        riderId: riderId,
        riderReviewRating: 5,
    })
    /*  const [newRiderReview,setNewRiderReview] = useState({
          orderId: 123,
          riderId: 1,
          riderReviewRating: 5,
      })*/


    useEffect(() => {
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const storedUser = JSON.parse(localStorage.getItem("user"));
        if (storedUser && storedUser.user_id) {
            setNewReview((prevReview) => ({
                ...prevReview,
                userId: storedUser.user_id,
            }));
        }
    }, []);

    //  Îß§Ïû• Î≥ÑÏ†ê ÏÑ†ÌÉù
    const handleStarClick = (rating) => {
        setNewReview((prevReview) => ({
            ...prevReview,
            reviewStarRating: rating,
        }));
    };

    //  ÎùºÏù¥Îçî Î≥ÑÏ†ê ÏÑ†ÌÉù
    const handleRiderStarClick = (rating) => {
        setNewRiderReview((prevReview) => ({
            ...prevReview,
            riderReviewRating: rating,
        }));
    };

    //  ÌååÏùº ÏÑ†ÌÉù Ìï∏Îì§Îü¨ (Ïó¨Îü¨ Í∞ú Ï∂îÍ∞Ä)
    const handleFileChange = (event) => {
        const files = Array.from(event.target.files);
        const previewFiles = files.map((file) => ({
            file,
            preview: URL.createObjectURL(file), // ÎØ∏Î¶¨Î≥¥Í∏∞ URL ÏÉùÏÑ±
        }));

        setSelectedImages((prevImages) => [...prevImages, ...previewFiles]); // Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÏóê Ï∂îÍ∞Ä
    };


    //  Í∞úÎ≥Ñ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
    const removeImage = (index) => {
        setSelectedImages((prevImages) => prevImages.filter((_, i) => i !== index));
    };


    //  Î¶¨Î∑∞ ÏûëÏÑ± ÏöîÏ≤≠
    const handleReviewSubmit = (e) => {
        e.preventDefault();

        if (!newReview.reviewContent.trim()) {
            alert("Î¶¨Î∑∞Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        setIsLoading(true);

        const formData = new FormData();
        formData.append("userId", newReview.userId);
        formData.append("storeId", newReview.storeId);
        formData.append("orderId", newReview.orderId);
        formData.append("reviewStarRating", newReview.reviewStarRating);
        formData.append("reviewContent", newReview.reviewContent);

        //  Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ïò¨Î∞îÎ•¥Í≤å Ï∂îÍ∞Ä
        selectedImages.forEach((img) => {
            formData.append("file", img.file);
        });



        axios.post("http://localhost:7070/api/reviews", formData)
            .then(() => {
                return axios.post("http://localhost:7070/api/riderReview", newRiderReview);
            })
            .then(() => {
                alert("Î¶¨Î∑∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!");
                navigate("/order");
                setNewReview((prevReview) => ({
                    ...prevReview,
                    reviewStarRating: 5,
                    reviewContent: "",
                }));
                setNewRiderReview((prevReview) => ({
                    ...prevReview,
                    riderReviewRating: 5,
                }));
                setSelectedImages([]);
            })
            .catch((err) => {
                console.error("Î¶¨Î∑∞ Ï†ÄÏû• Ïã§Ìå®", err);
                alert("Î∞±ÏóîÎìúÏóê Î¶¨Î∑∞Î•º Ï†ÄÏû•ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
            })
            .finally(() => {
                setIsLoading(false); //Î™®Îì† ÏöîÏ≤≠ ÏôÑÎ£å ÌõÑ Î°úÎî© Ï¢ÖÎ£å
            });
    };

    //Ìï¥ÎãπÎêòÎäî Ï£ºÎ¨∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (orderId) {
            axios.get(`http://localhost:7070/api/orders/${orderId}`)
                .then(res => {
                    setNewReview(prevReview => ({
                        ...prevReview,
                        orderId: orderId,
                        storeId: res.data.storeId, // storeId Ï∂îÍ∞Ä
                    }));
                    setNewRiderReview(prevReview => ({
                        ...prevReview,
                        orderId: orderId,
                        riderId: res.data.RiderIdOnDuty || null //  riderId Ï∂îÍ∞Ä (ÏóÜÏúºÎ©¥ null)
                    }));
                })
                .catch(err => console.error("Ï£ºÎ¨∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:", err));
        }
    }, [orderId]);

    // Í∞ÄÍ≤å Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (storeId) {
            axios.get(`http://localhost:7070/api/store/${storeId}`)
                .then(res => {
                    setStoreName(res.data.storeName); // Í∞ÄÍ≤å Ïù¥Î¶Ñ ÏÉÅÌÉú Ï†ÄÏû•
                })
                .catch(err => console.error("Í∞ÄÍ≤å Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:", err));
        }
    }, [storeId]);

    return (
        <div className="user-review-container">
            <div className="review-all">
                <div className="review-info">
                    <div className="user-title-center">Î¶¨Î∑∞ ÏûëÏÑ±ÌïòÍ∏∞</div>
                    <div className="user-order-hr"></div>

                    {isLoading ? (
                        <div className="loading-container">
                            <div className="loading-spinner"></div>
                            <p>Î¶¨Î∑∞Î•º Îì±Î°ùÌïòÎäî Ï§ëÏûÖÎãàÎã§...</p>
                        </div>
                    ) : (
                        <form onSubmit={handleReviewSubmit}>
                            <div className="star-rating">
                                <div className="user-order-bordtext">Îß§Ïû• Î≥ÑÏ†ê Î∞è Î¶¨Î∑∞</div>
                                <div className="user-order-address-text">{storeName}</div>
                                <div className="star-container">
                                    {[...Array(5)].map((_, index) => (
                                        <span
                                            key={index}
                                            className={index < newReview.reviewStarRating ? "star filled" : "star"}
                                            onClick={() => handleStarClick(index + 1)}
                                        >
                                    ‚òÖ
                                </span>
                                    ))}
                                </div>
                            </div>

                        {/* Î¶¨Î∑∞ ÏûÖÎ†• */}
                        <textarea
                            placeholder="ÏùåÏãùÏùò Îßõ, Ïñë, Ìè¨Ïû• ÏÉÅÌÉú Îì± ÏùåÏãùÏóê ÎåÄÌïú ÏÜîÏßÅÌïú Î¶¨Î∑∞Î•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî."
                            value={newReview.reviewContent}
                            onChange={(e) =>
                                setNewReview((prevReview) => ({
                                    ...prevReview,
                                    reviewContent: e.target.value,
                                }))
                            }
                        />

                        <div className="file-upload-wrapper">
                            {/* ÏÇ¨ÏßÑ Ï∂îÍ∞Ä Î≤ÑÌäº */}
                            <div className="file-upload">
                                <label htmlFor="file-input">
                                    <img src={groupIcon} alt="ÏóÖÎ°úÎìú" className="upload-icon"/>
                                </label>
                                <div className="btn-text">ÏÇ¨ÏßÑ Ï∂îÍ∞Ä</div>
                                <input id="file-input" type="file" accept="image/*" multiple
                                       onChange={handleFileChange}/>
                            </div>

                            {/* Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
                            <div className="image-preview-container">
                                {selectedImages.map((img, index) => (
                                    <div key={index} className="image-preview-wrapper">
                                        <div className="remove-image" onClick={() => removeImage(index)}>
                                            <img src={XIcon} alt="ÏÇ≠Ï†ú ÏïÑÏù¥ÏΩò" className="remove-icon"/>
                                        </div>
                                        <img src={img.preview} alt={`ÎØ∏Î¶¨Î≥¥Í∏∞ ${index}`} className="image-preview"/>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="review-divider"></div>

                        {/* ÎùºÏù¥Îçî Î≥ÑÏ†ê */}
                        <div className="star-rating">
                            <div className="user-order-bordtext">ÎùºÏù¥Îçî Î≥ÑÏ†ê</div>
                            <div className="star-container">
                                {[...Array(5)].map((_, index) => (
                                    <span
                                        key={index}
                                        className={index < newRiderReview.riderReviewRating ? "star filled" : "star"}
                                        onClick={() => handleRiderStarClick(index + 1)}
                                    >
                                ‚òÖ
                            </span>
                                ))}
                            </div>
                        </div>
                        <div className="button-center-wrapper">
                            <button type="submit" className="submit-button">ÏûëÏÑ±ÌïòÍ∏∞</button>
                        </div>
                    </form>
                    )}
                </div>
            </div>
        </div>
    );
};

export default UserReviewWrite;